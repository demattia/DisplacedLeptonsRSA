//
// File generated by rootcint at Wed May 28 19:11:05 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MyDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MyDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Track_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Track(void *p = 0);
   static void *newArray_Track(Long_t size, void *p);
   static void delete_Track(void *p);
   static void deleteArray_Track(void *p);
   static void destruct_Track(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Track*)
   {
      ::Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Track", ::Track::Class_Version(), "./../../../../RootTreeProducers//interface/Track.h", 13,
                  typeid(::Track), DefineBehavior(ptr, ptr),
                  &::Track::Dictionary, isa_proxy, 4,
                  sizeof(::Track) );
      instance.SetNew(&new_Track);
      instance.SetNewArray(&newArray_Track);
      instance.SetDelete(&delete_Track);
      instance.SetDeleteArray(&deleteArray_Track);
      instance.SetDestructor(&destruct_Track);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Track*)
   {
      return GenerateInitInstanceLocal((::Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void GenParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GenParticle(void *p = 0);
   static void *newArray_GenParticle(Long_t size, void *p);
   static void delete_GenParticle(void *p);
   static void deleteArray_GenParticle(void *p);
   static void destruct_GenParticle(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GenParticle*)
   {
      ::GenParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GenParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GenParticle", ::GenParticle::Class_Version(), "./../../../../RootTreeProducers//interface/GenParticle.h", 14,
                  typeid(::GenParticle), DefineBehavior(ptr, ptr),
                  &::GenParticle::Dictionary, isa_proxy, 4,
                  sizeof(::GenParticle) );
      instance.SetNew(&new_GenParticle);
      instance.SetNewArray(&newArray_GenParticle);
      instance.SetDelete(&delete_GenParticle);
      instance.SetDeleteArray(&deleteArray_GenParticle);
      instance.SetDestructor(&destruct_GenParticle);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GenParticle*)
   {
      return GenerateInitInstanceLocal((::GenParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GenParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *Track::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Track::Class_Name()
{
   return "Track";
}

//______________________________________________________________________________
const char *Track::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Track::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Track::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Track::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *GenParticle::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GenParticle::Class_Name()
{
   return "GenParticle";
}

//______________________________________________________________________________
const char *GenParticle::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GenParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GenParticle::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GenParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GenParticle::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GenParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GenParticle::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GenParticle*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Track::Streamer(TBuffer &R__b)
{
   // Stream an object of class Track.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Track::Class(),this);
   } else {
      R__b.WriteClassBuffer(Track::Class(),this);
   }
}

//______________________________________________________________________________
void Track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Track.
      TClass *R__cl = ::Track::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptError", &ptError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "etaError", &etaError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiError", &phiError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxy", &dxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxyError", &dxyError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzError", &dzError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vx", &vx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vy", &vy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vz", &vz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normalizedChi2", &normalizedChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "referencePointRadius", &referencePointRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "referencePointZ", &referencePointZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHits", &nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nValidHits", &nValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nValidPlusInvalidHits", &nValidPlusInvalidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "innermostHitRadius", &innermostHitRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "innermostHitZ", &innermostHitZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muonStationsWithAnyHits", &muonStationsWithAnyHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dtStationsWithAnyHits", &dtStationsWithAnyHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cscStationsWithAnyHits", &cscStationsWithAnyHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dtStationsWithValidHits", &dtStationsWithValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cscStationsWithValidHits", &cscStationsWithValidHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackAlgorithm", &trackAlgorithm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackQuality", &trackQuality);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Track(void *p) {
      return  p ? new(p) ::Track : new ::Track;
   }
   static void *newArray_Track(Long_t nElements, void *p) {
      return p ? new(p) ::Track[nElements] : new ::Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_Track(void *p) {
      delete ((::Track*)p);
   }
   static void deleteArray_Track(void *p) {
      delete [] ((::Track*)p);
   }
   static void destruct_Track(void *p) {
      typedef ::Track current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Track

//______________________________________________________________________________
void GenParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class GenParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GenParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(GenParticle::Class(),this);
   }
}

//______________________________________________________________________________
void GenParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GenParticle.
      TClass *R__cl = ::GenParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pt", &pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eta", &eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxy", &dxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxyError", &dxyError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dz", &dz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dzError", &dzError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "referencePointRadius", &referencePointRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "referencePointZ", &referencePointZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vx", &vx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vy", &vy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vz", &vz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pid", &pid);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GenParticle(void *p) {
      return  p ? new(p) ::GenParticle : new ::GenParticle;
   }
   static void *newArray_GenParticle(Long_t nElements, void *p) {
      return p ? new(p) ::GenParticle[nElements] : new ::GenParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_GenParticle(void *p) {
      delete ((::GenParticle*)p);
   }
   static void deleteArray_GenParticle(void *p) {
      delete [] ((::GenParticle*)p);
   }
   static void destruct_GenParticle(void *p) {
      typedef ::GenParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GenParticle

namespace ROOT {
   void vectorlEGenParticlegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEGenParticlegR_Dictionary();
   static void *new_vectorlEGenParticlegR(void *p = 0);
   static void *newArray_vectorlEGenParticlegR(Long_t size, void *p);
   static void delete_vectorlEGenParticlegR(void *p);
   static void deleteArray_vectorlEGenParticlegR(void *p);
   static void destruct_vectorlEGenParticlegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<GenParticle>*)
   {
      vector<GenParticle> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<GenParticle>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<GenParticle>", -2, "/uscmst1/prod/sw/cms/slc5_amd64_gcc462/lcg/root/5.32.00-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<GenParticle>), DefineBehavior(ptr, ptr),
                  0, &vectorlEGenParticlegR_Dictionary, isa_proxy, 4,
                  sizeof(vector<GenParticle>) );
      instance.SetNew(&new_vectorlEGenParticlegR);
      instance.SetNewArray(&newArray_vectorlEGenParticlegR);
      instance.SetDelete(&delete_vectorlEGenParticlegR);
      instance.SetDeleteArray(&deleteArray_vectorlEGenParticlegR);
      instance.SetDestructor(&destruct_vectorlEGenParticlegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<GenParticle> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<GenParticle>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEGenParticlegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<GenParticle>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEGenParticlegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<GenParticle> : new vector<GenParticle>;
   }
   static void *newArray_vectorlEGenParticlegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<GenParticle>[nElements] : new vector<GenParticle>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEGenParticlegR(void *p) {
      delete ((vector<GenParticle>*)p);
   }
   static void deleteArray_vectorlEGenParticlegR(void *p) {
      delete [] ((vector<GenParticle>*)p);
   }
   static void destruct_vectorlEGenParticlegR(void *p) {
      typedef vector<GenParticle> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<GenParticle>

namespace ROOT {
   void vectorlETrackgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETrackgR_Dictionary();
   static void *new_vectorlETrackgR(void *p = 0);
   static void *newArray_vectorlETrackgR(Long_t size, void *p);
   static void delete_vectorlETrackgR(void *p);
   static void deleteArray_vectorlETrackgR(void *p);
   static void destruct_vectorlETrackgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Track>*)
   {
      vector<Track> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Track>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Track>", -2, "/uscmst1/prod/sw/cms/slc5_amd64_gcc462/lcg/root/5.32.00-cms21/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<Track>), DefineBehavior(ptr, ptr),
                  0, &vectorlETrackgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<Track>) );
      instance.SetNew(&new_vectorlETrackgR);
      instance.SetNewArray(&newArray_vectorlETrackgR);
      instance.SetDelete(&delete_vectorlETrackgR);
      instance.SetDeleteArray(&deleteArray_vectorlETrackgR);
      instance.SetDestructor(&destruct_vectorlETrackgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Track> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Track>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETrackgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Track>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETrackgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Track> : new vector<Track>;
   }
   static void *newArray_vectorlETrackgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Track>[nElements] : new vector<Track>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETrackgR(void *p) {
      delete ((vector<Track>*)p);
   }
   static void deleteArray_vectorlETrackgR(void *p) {
      delete [] ((vector<Track>*)p);
   }
   static void destruct_vectorlETrackgR(void *p) {
      typedef vector<Track> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Track>

/********************************************************
* MyDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMyDict();

extern "C" void G__set_cpp_environmentMyDict() {
  G__cpp_reset_tagtableMyDict();
}
#include <new>
extern "C" int G__cpp_dllrevMyDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Track */
static int G__MyDict_219_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track[n];
     } else {
       p = new((void*) gvp) Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track;
     } else {
       p = new((void*) gvp) Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_219_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_219_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_219_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_219_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_219_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_219_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_219_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_219_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_219_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyDict_219_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Track(*(Track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Track G__TTrack;
static int G__MyDict_219_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Track*) (soff+(sizeof(Track)*i)))->~G__TTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Track*) (soff))->~G__TTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyDict_219_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* dest = (Track*) G__getstructoffset();
   *dest = *(Track*) libp->para[0].ref;
   const Track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GenParticle */
static int G__MyDict_220_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GenParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GenParticle[n];
     } else {
       p = new((void*) gvp) GenParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GenParticle;
     } else {
       p = new((void*) gvp) GenParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_GenParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_220_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GenParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_220_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GenParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_220_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GenParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_220_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GenParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_220_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GenParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_220_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GenParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_220_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GenParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_220_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GenParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_220_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GenParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MyDict_220_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GenParticle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GenParticle(*(GenParticle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_GenParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GenParticle G__TGenParticle;
static int G__MyDict_220_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GenParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GenParticle*) (soff+(sizeof(GenParticle)*i)))->~G__TGenParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GenParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GenParticle*) (soff))->~G__TGenParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MyDict_220_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GenParticle* dest = (GenParticle*) G__getstructoffset();
   *dest = *(GenParticle*) libp->para[0].ref;
   const GenParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<Track,allocator<Track> > */
static int G__MyDict_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Track,allocator<Track> >::reference obj = ((vector<Track,allocator<Track> >*) G__getstructoffset())->at((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Track,allocator<Track> >::const_reference obj = ((const vector<Track,allocator<Track> >*) G__getstructoffset())->at((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Track,allocator<Track> >::iterator* pobj;
         vector<Track,allocator<Track> >::iterator xobj = ((vector<Track,allocator<Track> >*) G__getstructoffset())->begin();
         pobj = new vector<Track,allocator<Track> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Track,allocator<Track> >::iterator* pobj;
         vector<Track,allocator<Track> >::iterator xobj = ((vector<Track,allocator<Track> >*) G__getstructoffset())->end();
         pobj = new vector<Track,allocator<Track> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Track,allocator<Track> >::reverse_iterator* pobj;
         vector<Track,allocator<Track> >::reverse_iterator xobj = ((vector<Track,allocator<Track> >*) G__getstructoffset())->rbegin();
         pobj = new vector<Track,allocator<Track> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Track,allocator<Track> >::reverse_iterator* pobj;
         vector<Track,allocator<Track> >::reverse_iterator xobj = ((vector<Track,allocator<Track> >*) G__getstructoffset())->rend();
         pobj = new vector<Track,allocator<Track> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Track,allocator<Track> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Track,allocator<Track> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->resize((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->resize((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]), *((Track*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Track,allocator<Track> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<Track,allocator<Track> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Track,allocator<Track> >::reference obj = ((vector<Track,allocator<Track> >*) G__getstructoffset())->operator[]((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Track,allocator<Track> >::const_reference obj = ((const vector<Track,allocator<Track> >*) G__getstructoffset())->operator[]((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Track,allocator<Track> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Track,allocator<Track> >[n];
     } else {
       p = new((void*) gvp) vector<Track,allocator<Track> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Track,allocator<Track> >;
     } else {
       p = new((void*) gvp) vector<Track,allocator<Track> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Track,allocator<Track> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Track,allocator<Track> >((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]), *(Track*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<Track,allocator<Track> >((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]), *(Track*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Track,allocator<Track> >((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<Track,allocator<Track> >((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Track,allocator<Track> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Track,allocator<Track> >(*(vector<Track,allocator<Track> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<Track,allocator<Track> >(*(vector<Track,allocator<Track> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Track,allocator<Track> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Track,allocator<Track> >(*((vector<Track,allocator<Track> >::const_iterator*) G__int(libp->para[0])), *((vector<Track,allocator<Track> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<Track,allocator<Track> >(*((vector<Track,allocator<Track> >::const_iterator*) G__int(libp->para[0])), *((vector<Track,allocator<Track> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Track,allocator<Track> >& obj = ((vector<Track,allocator<Track> >*) G__getstructoffset())->operator=(*(vector<Track,allocator<Track> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->reserve((vector<Track,allocator<Track> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Track& obj = ((vector<Track,allocator<Track> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Track& obj = ((vector<Track,allocator<Track> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->push_back(*(Track*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->swap(*(vector<Track,allocator<Track> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Track,allocator<Track> >::iterator* pobj;
         vector<Track,allocator<Track> >::iterator xobj = ((vector<Track,allocator<Track> >*) G__getstructoffset())->insert(*((vector<Track,allocator<Track> >::iterator*) G__int(libp->para[0])), *(Track*) libp->para[1].ref);
         pobj = new vector<Track,allocator<Track> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->insert(*((vector<Track,allocator<Track> >::iterator*) G__int(libp->para[0])), *((vector<Track,allocator<Track> >::const_iterator*) G__int(libp->para[1]))
, *((vector<Track,allocator<Track> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->insert(*((vector<Track,allocator<Track> >::iterator*) G__int(libp->para[0])), (vector<Track,allocator<Track> >::size_type) G__int(libp->para[1])
, *(Track*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->erase(*((vector<Track,allocator<Track> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->erase(*((vector<Track,allocator<Track> >::iterator*) G__int(libp->para[0])), *((vector<Track,allocator<Track> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_222_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Track,allocator<Track> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<Track,allocator<Track> > G__TvectorlETrackcOallocatorlETrackgRsPgR;
static int G__MyDict_222_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<Track,allocator<Track> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<Track,allocator<Track> >*) (soff+(sizeof(vector<Track,allocator<Track> >)*i)))->~G__TvectorlETrackcOallocatorlETrackgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<Track,allocator<Track> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<Track,allocator<Track> >*) (soff))->~G__TvectorlETrackcOallocatorlETrackgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<GenParticle,allocator<GenParticle> > */
static int G__MyDict_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<GenParticle,allocator<GenParticle> >::reference obj = ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->at((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<GenParticle,allocator<GenParticle> >::const_reference obj = ((const vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->at((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<GenParticle,allocator<GenParticle> >::iterator* pobj;
         vector<GenParticle,allocator<GenParticle> >::iterator xobj = ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->begin();
         pobj = new vector<GenParticle,allocator<GenParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<GenParticle,allocator<GenParticle> >::iterator* pobj;
         vector<GenParticle,allocator<GenParticle> >::iterator xobj = ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->end();
         pobj = new vector<GenParticle,allocator<GenParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<GenParticle,allocator<GenParticle> >::reverse_iterator* pobj;
         vector<GenParticle,allocator<GenParticle> >::reverse_iterator xobj = ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->rbegin();
         pobj = new vector<GenParticle,allocator<GenParticle> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<GenParticle,allocator<GenParticle> >::reverse_iterator* pobj;
         vector<GenParticle,allocator<GenParticle> >::reverse_iterator xobj = ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->rend();
         pobj = new vector<GenParticle,allocator<GenParticle> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->resize((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->resize((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]), *((GenParticle*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<GenParticle,allocator<GenParticle> >::reference obj = ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->operator[]((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<GenParticle,allocator<GenParticle> >::const_reference obj = ((const vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->operator[]((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<GenParticle,allocator<GenParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<GenParticle,allocator<GenParticle> >[n];
     } else {
       p = new((void*) gvp) vector<GenParticle,allocator<GenParticle> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<GenParticle,allocator<GenParticle> >;
     } else {
       p = new((void*) gvp) vector<GenParticle,allocator<GenParticle> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<GenParticle,allocator<GenParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<GenParticle,allocator<GenParticle> >((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]), *(GenParticle*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<GenParticle,allocator<GenParticle> >((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]), *(GenParticle*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<GenParticle,allocator<GenParticle> >((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<GenParticle,allocator<GenParticle> >((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<GenParticle,allocator<GenParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<GenParticle,allocator<GenParticle> >(*(vector<GenParticle,allocator<GenParticle> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<GenParticle,allocator<GenParticle> >(*(vector<GenParticle,allocator<GenParticle> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<GenParticle,allocator<GenParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<GenParticle,allocator<GenParticle> >(*((vector<GenParticle,allocator<GenParticle> >::const_iterator*) G__int(libp->para[0])), *((vector<GenParticle,allocator<GenParticle> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<GenParticle,allocator<GenParticle> >(*((vector<GenParticle,allocator<GenParticle> >::const_iterator*) G__int(libp->para[0])), *((vector<GenParticle,allocator<GenParticle> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<GenParticle,allocator<GenParticle> >& obj = ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->operator=(*(vector<GenParticle,allocator<GenParticle> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->reserve((vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const GenParticle& obj = ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const GenParticle& obj = ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->push_back(*(GenParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->swap(*(vector<GenParticle,allocator<GenParticle> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<GenParticle,allocator<GenParticle> >::iterator* pobj;
         vector<GenParticle,allocator<GenParticle> >::iterator xobj = ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->insert(*((vector<GenParticle,allocator<GenParticle> >::iterator*) G__int(libp->para[0])), *(GenParticle*) libp->para[1].ref);
         pobj = new vector<GenParticle,allocator<GenParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->insert(*((vector<GenParticle,allocator<GenParticle> >::iterator*) G__int(libp->para[0])), *((vector<GenParticle,allocator<GenParticle> >::const_iterator*) G__int(libp->para[1]))
, *((vector<GenParticle,allocator<GenParticle> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->insert(*((vector<GenParticle,allocator<GenParticle> >::iterator*) G__int(libp->para[0])), (vector<GenParticle,allocator<GenParticle> >::size_type) G__int(libp->para[1])
, *(GenParticle*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->erase(*((vector<GenParticle,allocator<GenParticle> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->erase(*((vector<GenParticle,allocator<GenParticle> >::iterator*) G__int(libp->para[0])), *((vector<GenParticle,allocator<GenParticle> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MyDict_226_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<GenParticle,allocator<GenParticle> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<GenParticle,allocator<GenParticle> > G__TvectorlEGenParticlecOallocatorlEGenParticlegRsPgR;
static int G__MyDict_226_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<GenParticle,allocator<GenParticle> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<GenParticle,allocator<GenParticle> >*) (soff+(sizeof(vector<GenParticle,allocator<GenParticle> >)*i)))->~G__TvectorlEGenParticlecOallocatorlEGenParticlegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<GenParticle,allocator<GenParticle> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<GenParticle,allocator<GenParticle> >*) (soff))->~G__TvectorlEGenParticlecOallocatorlEGenParticlegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Track */

/* GenParticle */

/* vector<Track,allocator<Track> > */

/* vector<GenParticle,allocator<GenParticle> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMyDict {
 public:
  G__Sizep2memfuncMyDict(): p(&G__Sizep2memfuncMyDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMyDict::*p)();
};

size_t G__get_sizep2memfuncMyDict()
{
  G__Sizep2memfuncMyDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMyDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyDictLN_Track))) {
     Track *G__Lderived;
     G__Lderived=(Track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyDictLN_Track),G__get_linked_tagnum(&G__MyDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MyDictLN_GenParticle))) {
     GenParticle *G__Lderived;
     G__Lderived=(GenParticle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MyDictLN_GenParticle),G__get_linked_tagnum(&G__MyDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMyDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MyDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__MyDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Track>",117,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__MyDictLN_Track),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MyDictLN_Track),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MyDictLN_Track),256,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MyDictLN_Track),1,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MyDictLN_Track),257,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETrackcOallocatorlETrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETrackcOallocatorlETrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETrackcOallocatorlETrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETrackcOallocatorlETrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<GenParticle>",117,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__MyDictLN_GenParticle),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__MyDictLN_GenParticle),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__MyDictLN_GenParticle),256,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__MyDictLN_GenParticle),1,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__MyDictLN_GenParticle),257,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Track */
static void G__setup_memvarTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyDictLN_Track));
   { Track *p; p=(Track*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),100,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptError)-(long)(p)),100,0,0,-1,-1,-1,1,"ptError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),100,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->etaError)-(long)(p)),100,0,0,-1,-1,-1,1,"etaError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phiError)-(long)(p)),100,0,0,-1,-1,-1,1,"phiError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxy)-(long)(p)),100,0,0,-1,-1,-1,1,"dxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxyError)-(long)(p)),100,0,0,-1,-1,-1,1,"dxyError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),100,0,0,-1,-1,-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dzError)-(long)(p)),100,0,0,-1,-1,-1,1,"dzError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vx)-(long)(p)),100,0,0,-1,-1,-1,1,"vx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vy)-(long)(p)),100,0,0,-1,-1,-1,1,"vy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vz)-(long)(p)),100,0,0,-1,-1,-1,1,"vz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),100,0,0,-1,-1,-1,1,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->normalizedChi2)-(long)(p)),100,0,0,-1,-1,-1,1,"normalizedChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->referencePointRadius)-(long)(p)),100,0,0,-1,-1,-1,1,"referencePointRadius=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->referencePointZ)-(long)(p)),100,0,0,-1,-1,-1,1,"referencePointZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nValidHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nValidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nValidPlusInvalidHits)-(long)(p)),105,0,0,-1,-1,-1,1,"nValidPlusInvalidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->innermostHitRadius)-(long)(p)),100,0,0,-1,-1,-1,1,"innermostHitRadius=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->innermostHitZ)-(long)(p)),100,0,0,-1,-1,-1,1,"innermostHitZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muonStationsWithAnyHits)-(long)(p)),105,0,0,-1,-1,-1,1,"muonStationsWithAnyHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dtStationsWithAnyHits)-(long)(p)),105,0,0,-1,-1,-1,1,"dtStationsWithAnyHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cscStationsWithAnyHits)-(long)(p)),105,0,0,-1,-1,-1,1,"cscStationsWithAnyHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dtStationsWithValidHits)-(long)(p)),105,0,0,-1,-1,-1,1,"dtStationsWithValidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cscStationsWithValidHits)-(long)(p)),105,0,0,-1,-1,-1,1,"cscStationsWithValidHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackAlgorithm)-(long)(p)),105,0,0,-1,-1,-1,1,"trackAlgorithm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackQuality)-(long)(p)),103,0,0,-1,-1,-1,1,"trackQuality=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GenParticle */
static void G__setup_memvarGenParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyDictLN_GenParticle));
   { GenParticle *p; p=(GenParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pt)-(long)(p)),100,0,0,-1,-1,-1,1,"pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->eta)-(long)(p)),100,0,0,-1,-1,-1,1,"eta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),100,0,0,-1,-1,-1,1,"phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->charge)-(long)(p)),105,0,0,-1,-1,-1,1,"charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxy)-(long)(p)),100,0,0,-1,-1,-1,1,"dxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxyError)-(long)(p)),100,0,0,-1,-1,-1,1,"dxyError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dz)-(long)(p)),100,0,0,-1,-1,-1,1,"dz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dzError)-(long)(p)),100,0,0,-1,-1,-1,1,"dzError=",0,"They have an error because they are the result of a propagation.");
   G__memvar_setup((void*)((long)(&p->referencePointRadius)-(long)(p)),100,0,0,-1,-1,-1,1,"referencePointRadius=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->referencePointZ)-(long)(p)),100,0,0,-1,-1,-1,1,"referencePointZ=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vx)-(long)(p)),100,0,0,-1,-1,-1,1,"vx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vy)-(long)(p)),100,0,0,-1,-1,-1,1,"vy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vz)-(long)(p)),100,0,0,-1,-1,-1,1,"vz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pid)-(long)(p)),105,0,0,-1,-1,-1,1,"pid=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MyDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<Track,allocator<Track> > */
static void G__setup_memvarvectorlETrackcOallocatorlETrackgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   { vector<Track,allocator<Track> > *p; p=(vector<Track,allocator<Track> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<GenParticle,allocator<GenParticle> > */
static void G__setup_memvarvectorlEGenParticlecOallocatorlEGenParticlegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   { vector<GenParticle,allocator<GenParticle> > *p; p=(vector<GenParticle,allocator<GenParticle> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMyDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTrack(void) {
   /* Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyDictLN_Track));
   G__memfunc_setup("Track",501,G__MyDict_219_0_1, 105, G__get_linked_tagnum(&G__MyDictLN_Track), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyDict_219_0_2, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyDict_219_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyDict_219_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyDict_219_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyDict_219_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyDict_219_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyDict_219_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyDict_219_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyDict_219_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Track::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Track", 501, G__MyDict_219_0_14, (int) ('i'), G__get_linked_tagnum(&G__MyDictLN_Track), -1, 0, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Track", 627, G__MyDict_219_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyDict_219_0_16, (int) ('u'), G__get_linked_tagnum(&G__MyDictLN_Track), -1, 1, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGenParticle(void) {
   /* GenParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyDictLN_GenParticle));
   G__memfunc_setup("GenParticle",1102,G__MyDict_220_0_1, 105, G__get_linked_tagnum(&G__MyDictLN_GenParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MyDict_220_0_2, 85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GenParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MyDict_220_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GenParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MyDict_220_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GenParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MyDict_220_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GenParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MyDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MyDict_220_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MyDict_220_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GenParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MyDict_220_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GenParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MyDict_220_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GenParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MyDict_220_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GenParticle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GenParticle", 1102, G__MyDict_220_0_14, (int) ('i'), G__get_linked_tagnum(&G__MyDictLN_GenParticle), -1, 0, 1, 1, 1, 0, "u 'GenParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GenParticle", 1228, G__MyDict_220_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MyDict_220_0_16, (int) ('u'), G__get_linked_tagnum(&G__MyDictLN_GenParticle), -1, 1, 1, 1, 1, 0, "u 'GenParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETrackcOallocatorlETrackgRsPgR(void) {
   /* vector<Track,allocator<Track> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR));
   G__memfunc_setup("at",213,G__MyDict_222_0_1, 117, G__get_linked_tagnum(&G__MyDictLN_Track), G__defined_typename("vector<Track,allocator<Track> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<Track,allocator<Track> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__MyDict_222_0_2, 117, G__get_linked_tagnum(&G__MyDictLN_Track), G__defined_typename("vector<Track,allocator<Track> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<Track,allocator<Track> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__MyDict_222_0_3, 117, G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__MyDict_222_0_4, 117, G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__MyDict_222_0_5, 117, G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETrackcOallocatorlETrackgRsPgRcLcLiteratorgR), G__defined_typename("vector<Track,allocator<Track> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__MyDict_222_0_6, 117, G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlETrackcOallocatorlETrackgRsPgRcLcLiteratorgR), G__defined_typename("vector<Track,allocator<Track> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__MyDict_222_0_7, 107, -1, G__defined_typename("vector<Track,allocator<Track> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__MyDict_222_0_8, 107, -1, G__defined_typename("vector<Track,allocator<Track> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyDict_222_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<Track,allocator<Track> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyDict_222_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<Track,allocator<Track> >::size_type' 0 - sz u 'Track' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__MyDict_222_0_11, 107, -1, G__defined_typename("vector<Track,allocator<Track> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__MyDict_222_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyDict_222_0_13, 117, G__get_linked_tagnum(&G__MyDictLN_Track), G__defined_typename("vector<Track,allocator<Track> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<Track,allocator<Track> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyDict_222_0_14, 117, G__get_linked_tagnum(&G__MyDictLN_Track), G__defined_typename("vector<Track,allocator<Track> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<Track,allocator<Track> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Track,allocator<Track> >",2942,G__MyDict_222_0_15, 105, G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Track,allocator<Track> >",2942,G__MyDict_222_0_16, 105, G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<Track,allocator<Track> >::size_type' 0 - n u 'Track' - 11 'Track()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Track,allocator<Track> >",2942,G__MyDict_222_0_17, 105, G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<Track,allocator<Track> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Track,allocator<Track> >",2942,G__MyDict_222_0_18, 105, G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<Track,allocator<Track> >::iterator' 'vector<Track,allocator<Track> >::const_iterator' 10 - first u 'vector<Track,allocator<Track> >::iterator' 'vector<Track,allocator<Track> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MyDict_222_0_19, 117, G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<Track,allocator<Track> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__MyDict_222_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<Track,allocator<Track> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__MyDict_222_0_21, 117, G__get_linked_tagnum(&G__MyDictLN_Track), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__MyDict_222_0_22, 117, G__get_linked_tagnum(&G__MyDictLN_Track), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__MyDict_222_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Track' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__MyDict_222_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Track,allocator<Track> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyDict_222_0_25, 117, G__get_linked_tagnum(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<Track,allocator<Track> >::iterator' - 0 - position u 'Track' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyDict_222_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<Track,allocator<Track> >::iterator' - 0 - position u 'vector<Track,allocator<Track> >::iterator' 'vector<Track,allocator<Track> >::const_iterator' 10 - first "
"u 'vector<Track,allocator<Track> >::iterator' 'vector<Track,allocator<Track> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyDict_222_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<Track,allocator<Track> >::iterator' - 0 - position k - 'vector<Track,allocator<Track> >::size_type' 0 - n "
"u 'Track' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__MyDict_222_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyDict_222_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Track,allocator<Track> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyDict_222_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<Track,allocator<Track> >::iterator' - 0 - first u 'vector<Track,allocator<Track> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MyDict_222_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<Track,allocator<Track> >", 3068, G__MyDict_222_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEGenParticlecOallocatorlEGenParticlegRsPgR(void) {
   /* vector<GenParticle,allocator<GenParticle> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR));
   G__memfunc_setup("at",213,G__MyDict_226_0_1, 117, G__get_linked_tagnum(&G__MyDictLN_GenParticle), G__defined_typename("vector<GenParticle,allocator<GenParticle> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<GenParticle,allocator<GenParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__MyDict_226_0_2, 117, G__get_linked_tagnum(&G__MyDictLN_GenParticle), G__defined_typename("vector<GenParticle,allocator<GenParticle> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<GenParticle,allocator<GenParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__MyDict_226_0_3, 117, G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__MyDict_226_0_4, 117, G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__MyDict_226_0_5, 117, G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiteratorgR), G__defined_typename("vector<GenParticle,allocator<GenParticle> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__MyDict_226_0_6, 117, G__get_linked_tagnum(&G__MyDictLN_reverse_iteratorlEvectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiteratorgR), G__defined_typename("vector<GenParticle,allocator<GenParticle> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__MyDict_226_0_7, 107, -1, G__defined_typename("vector<GenParticle,allocator<GenParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__MyDict_226_0_8, 107, -1, G__defined_typename("vector<GenParticle,allocator<GenParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyDict_226_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<GenParticle,allocator<GenParticle> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__MyDict_226_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<GenParticle,allocator<GenParticle> >::size_type' 0 - sz u 'GenParticle' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__MyDict_226_0_11, 107, -1, G__defined_typename("vector<GenParticle,allocator<GenParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__MyDict_226_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyDict_226_0_13, 117, G__get_linked_tagnum(&G__MyDictLN_GenParticle), G__defined_typename("vector<GenParticle,allocator<GenParticle> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<GenParticle,allocator<GenParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__MyDict_226_0_14, 117, G__get_linked_tagnum(&G__MyDictLN_GenParticle), G__defined_typename("vector<GenParticle,allocator<GenParticle> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<GenParticle,allocator<GenParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<GenParticle,allocator<GenParticle> >",4144,G__MyDict_226_0_15, 105, G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<GenParticle,allocator<GenParticle> >",4144,G__MyDict_226_0_16, 105, G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<GenParticle,allocator<GenParticle> >::size_type' 0 - n u 'GenParticle' - 11 'GenParticle()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<GenParticle,allocator<GenParticle> >",4144,G__MyDict_226_0_17, 105, G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<GenParticle,allocator<GenParticle> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<GenParticle,allocator<GenParticle> >",4144,G__MyDict_226_0_18, 105, G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<GenParticle,allocator<GenParticle> >::iterator' 'vector<GenParticle,allocator<GenParticle> >::const_iterator' 10 - first u 'vector<GenParticle,allocator<GenParticle> >::iterator' 'vector<GenParticle,allocator<GenParticle> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__MyDict_226_0_19, 117, G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<GenParticle,allocator<GenParticle> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__MyDict_226_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<GenParticle,allocator<GenParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__MyDict_226_0_21, 117, G__get_linked_tagnum(&G__MyDictLN_GenParticle), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__MyDict_226_0_22, 117, G__get_linked_tagnum(&G__MyDictLN_GenParticle), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__MyDict_226_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'GenParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__MyDict_226_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<GenParticle,allocator<GenParticle> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyDict_226_0_25, 117, G__get_linked_tagnum(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<GenParticle,allocator<GenParticle> >::iterator' - 0 - position u 'GenParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyDict_226_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<GenParticle,allocator<GenParticle> >::iterator' - 0 - position u 'vector<GenParticle,allocator<GenParticle> >::iterator' 'vector<GenParticle,allocator<GenParticle> >::const_iterator' 10 - first "
"u 'vector<GenParticle,allocator<GenParticle> >::iterator' 'vector<GenParticle,allocator<GenParticle> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__MyDict_226_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<GenParticle,allocator<GenParticle> >::iterator' - 0 - position k - 'vector<GenParticle,allocator<GenParticle> >::size_type' 0 - n "
"u 'GenParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__MyDict_226_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyDict_226_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<GenParticle,allocator<GenParticle> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__MyDict_226_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<GenParticle,allocator<GenParticle> >::iterator' - 0 - first u 'vector<GenParticle,allocator<GenParticle> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__MyDict_226_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<GenParticle,allocator<GenParticle> >", 4270, G__MyDict_226_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMyDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMyDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMyDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MyDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_Track = { "Track" , 99 , -1 };
G__linked_taginfo G__MyDictLN_GenParticle = { "GenParticle" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR = { "vector<Track,allocator<Track> >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgRcLcLiterator = { "vector<Track,allocator<Track> >::iterator" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlETrackcOallocatorlETrackgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Track,allocator<Track> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR = { "vector<GenParticle,allocator<GenParticle> >" , 99 , -1 };
G__linked_taginfo G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiterator = { "vector<GenParticle,allocator<GenParticle> >::iterator" , 99 , -1 };
G__linked_taginfo G__MyDictLN_reverse_iteratorlEvectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<GenParticle,allocator<GenParticle> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMyDict() {
  G__MyDictLN_TClass.tagnum = -1 ;
  G__MyDictLN_TBuffer.tagnum = -1 ;
  G__MyDictLN_TMemberInspector.tagnum = -1 ;
  G__MyDictLN_TObject.tagnum = -1 ;
  G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MyDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MyDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__MyDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__MyDictLN_Track.tagnum = -1 ;
  G__MyDictLN_GenParticle.tagnum = -1 ;
  G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR.tagnum = -1 ;
  G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgRcLcLiterator.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlETrackcOallocatorlETrackgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR.tagnum = -1 ;
  G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiterator.tagnum = -1 ;
  G__MyDictLN_reverse_iteratorlEvectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMyDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MyDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_TMatrixTSparseDiaglEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyDictLN_Track),sizeof(Track),-1,291072,(char*)NULL,G__setup_memvarTrack,G__setup_memfuncTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyDictLN_GenParticle),sizeof(GenParticle),-1,291072,(char*)NULL,G__setup_memvarGenParticle,G__setup_memfuncGenParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgR),sizeof(vector<Track,allocator<Track> >),-1,298752,(char*)NULL,G__setup_memvarvectorlETrackcOallocatorlETrackgRsPgR,G__setup_memfuncvectorlETrackcOallocatorlETrackgRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlETrackcOallocatorlETrackgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlETrackcOallocatorlETrackgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgR),sizeof(vector<GenParticle,allocator<GenParticle> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEGenParticlecOallocatorlEGenParticlegRsPgR,G__setup_memfuncvectorlEGenParticlecOallocatorlEGenParticlegRsPgR);
   G__get_linked_tagnum_fwd(&G__MyDictLN_vectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__MyDictLN_reverse_iteratorlEvectorlEGenParticlecOallocatorlEGenParticlegRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupMyDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMyDict()");
  G__set_cpp_environmentMyDict();
  G__cpp_setup_tagtableMyDict();

  G__cpp_setup_inheritanceMyDict();

  G__cpp_setup_typetableMyDict();

  G__cpp_setup_memvarMyDict();

  G__cpp_setup_memfuncMyDict();
  G__cpp_setup_globalMyDict();
  G__cpp_setup_funcMyDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMyDict();
  return;
}
class G__cpp_setup_initMyDict {
  public:
    G__cpp_setup_initMyDict() { G__add_setup_func("MyDict",(G__incsetup)(&G__cpp_setupMyDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMyDict() { G__remove_setup_func("MyDict"); }
};
G__cpp_setup_initMyDict G__cpp_setup_initializerMyDict;

